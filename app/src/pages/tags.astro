---
import { getEntry, render } from "astro:content"

import type { RenderResult } from "astro:content"
import type { Tag } from "@argon/util/types"

import { get } from "@argon/util/api"
import { groupTags } from "@argon/util/tag"

import Page from "@argon/layouts/Page.astro"
import Navbar from "@argon/components/navbar/Navbar.astro"
import TagBox from "@argon/components/tag/TagBox.astro"
import TagIcon from "@argon/components/tag/TagIcon.tsx"

import "@argon/pages/_tags.css"
import "@argon/globals.css"

const tagsBlurb = await getEntry('misc', 'tags')
const { Content } = tagsBlurb ? await render( tagsBlurb ) : {} as RenderResult

const tags: Tag[] | null = await get(Astro.request, `tags/list`, (res: Response) => res.json())
const grouped = groupTags( tags ?? [] )

function toTitleCase( title: string ) {
	return title.replace(
		/\w\S*/g,
		text => text.charAt(0).toUpperCase() + text.substring(1).toLowerCase()
	)
}
---

<Page title="Tags">
	<Navbar search={ false } message={ `Tags: ${tags?.length ?? 0}` }/>
	<div class="content">
		<div class="section center-title">
			{ Content && <Content/> }
		</div>
		{ grouped && Object.keys( grouped ).map( ( type: string ) => {
			return <div class="section center-title">
				<h1 class="tag-title">
					<TagIcon tag={ { type: type } as Tag } client:load/>
					<span>{ toTitleCase( type ) }</span>
				</h1>
				<TagBox tags={ grouped[ type ] } clickable={ true }/>
			</div>
		}) }
	</div>
</Page>